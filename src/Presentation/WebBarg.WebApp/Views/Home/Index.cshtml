@using System.Web.Helpers
@* @using WebBarg.Application.DTO
@model X.PagedList.IPagedList<UserDto> *@
@{
    ViewData["Title"] = "Home Page";
}

<style>
    .wrapper {
        width: 400px;
        height: 400px;
        border: 1px solid black; /* for demonstration purposes*/
    }

    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    h2 {
        color: #333;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #f5f5f5;
    }
    .container_bar{
        display: flex;
        justify-content: space-around;
        align-items: center;
    }
</style>
<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <input type="text" id="filterInput" placeholder="Enter Filter Value" />
    <button id="refreshButton">Refresh Data</button>
    <div class="container_bar">
        <div class="wrapper">
            <canvas id="pieChart" width="400" height="400"></canvas>
        </div>
        <div>
            <h2>User List</h2>


            <table id="userTable" border="1">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Family</th>
                        <th>City</th>
                        <th>Country</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Table content will be loaded dynamically here -->
                </tbody>
            </table>

            <div id="paginationContainer">
                <!-- Pagination controls will be loaded dynamically here -->
            </div>
        </div>
</div>
    
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<script>
    $(document).ready(function () {
        loadData(1); // Load data for the first page on document ready
    });

    function loadData(page) {
        $.ajax({
            type: "GET",
            url: "api/user/GetUsers",
            data: { filter: "", pageNumber: page },
            success: function (result) {
                updateTable(result);
                updatePagination(result);
            },
            error: function (error) {
                console.error("Error loading data:", error);
            }
        });
    }

    function updateTable(data) {
        var table = $("#userTable");
        table.find("tbody").empty(); // Clear existing content

        // Add table rows
        $.each(data, function (index, user) {
            var row = `<tr><td>${user.name}</td><td>${user.family}</td><td>${user.cityName}</td><td>${user.countryName}</td></tr>`;
            table.find("tbody").append(row);
        });
    }

    function updatePagination(data) {
        var paginationContainer = $("#paginationContainer");
        paginationContainer.empty(); // Clear existing content

        // Add pagination controls
        var pagination = `<nav aria-label="Page navigation"><ul class="pagination">`;
        for (var i = 1; i <= data.TotalPages; i++) {
            pagination += `<li class="page-item${i === data.PageNumber ? ' active' : ''}"><a class="page-link" href="#" onclick="loadData(${i})">${i}</a></li>`;
        }
        pagination += `</ul></nav>`;

        paginationContainer.append(pagination);
    }
    document.addEventListener('DOMContentLoaded', function () {
        var pieChartCanvas = document.getElementById('pieChart');
        var refreshButton = document.getElementById('refreshButton');
        var filterInput = document.getElementById('filterInput');
        fetchDataAndRefreshChart();

        var pieChart;

        refreshButton.addEventListener('click', function () {
            fetchDataAndRefreshChart();
        });

        async function fetchDataAndRefreshChart() {
            // Fetch data from your API endpoint with the filter value
            var filterValue = filterInput.value;
            var response = await fetch(`api/User/ChartPie?filter=${filterValue}`);
            var data = await response.json();

            // Update pie chart data
            updatePieChartData(data);
        }

        function updatePieChartData(data) {
            if (pieChart) {
                pieChart.destroy(); // Destroy the existing chart instance
            }

            var ctx = pieChartCanvas.getContext('2d');
            pieChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: data.map(item => item.cityName),
                    datasets: [{
                        data: data.map(item => item.userCount),
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(255, 99, 86, 0.7)',
                            'rgba(54, 99, 86, 0.7)',
                            'rgba(54, 99, 132, 0.7)',
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(255, 206, 132, 0.7)',
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(255, 99, 86, 0.7)',
                            // Add more colors as needed
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(255, 99, 86, 1)',
                            'rgba(54, 99, 86, 1)',
                            'rgba(54, 99, 132, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 206, 132, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(255, 99, 86, 1)',
                            // Add more colors as needed
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    // Add other options as needed
                }
            });
        }

        // Initial data fetch and chart rendering
        fetchDataAndRefreshChart();
    });
</script>

